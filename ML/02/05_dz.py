import numpy as np
import matplotlib.pyplot as plt

# Данные
X = np.array([1, 2, 3, 4, 5])       # Часы подготовки
Y = np.array([50, 55, 65, 70, 75])  # Оценка за экзамен

# Вычисление средних значений
mean_x = np.mean(X)
mean_y = np.mean(Y)

# Вычисление коэффициента наклона w и свободного члена b
numerator = sum((x - mean_x) * (y - mean_y) for x, y in zip(X, Y))
denominator = sum((x - mean_x)**2 for x in X)

w = numerator / denominator
b = mean_y - w * mean_x

# Вывод уравнения регрессии
print("==============================================")
print("           Результат линейной регрессии       ")
print("==============================================\n")

print(f"Уравнение регрессии: y = {w:.2f}x + {b:.2f}\n")

# Прогноз для 6 часов подготовки
hours = 6
predicted_score = w * hours + b
print(f"Предсказанная оценка для {hours} часов подготовки: {predicted_score:.2f}\n")

# Расчёт среднеквадратичной ошибки (MSE)
predicted_Y = [w * x + b for x in X]
errors = [actual - predicted for actual, predicted in zip(Y, predicted_Y)]
squared_errors = [e**2 for e in errors]
mse = sum(squared_errors) / len(Y)

print("Таблица предсказаний и ошибок:")
print("{:<8}{:<8}{:<12}{:<12}{:<12}".format("X", "Y", "Y_pred", "Ошибка", "Ошибка^2"))
for i in range(len(X)):
    print(f"{X[i]:<8}{Y[i]:<8}{predicted_Y[i]:<12.2f}{errors[i]:<12.2f}{squared_errors[i]:<12.2f}")

print(f"\nСреднеквадратичная ошибка (MSE): {mse:.2f}")
print("\n==============================================")
print("                   Вывод                      ")
print("==============================================\n")

print("Вывод:")
print("На основе предоставленных данных была построена модель линейной регрессии.")
print("Модель показывает, как количество часов подготовки влияет на оценку за экзамен.\n")
print(f"Коэффициент наклона (w): {w:.2f} — это означает, что при увеличении времени подготовки на 1 час, оценка в среднем возрастает на {w:.2f} баллов.")
print(f"Свободный член (b): {b:.2f} — это прогнозируемая оценка, если студент не готовился вообще (0 часов).\n")
print(f"Для студента, который готовился {hours} часов, модель предсказывает оценку: {predicted_score:.2f} баллов.\n")
print("Оценка точности модели через MSE (среднеквадратичная ошибка):")
print(f"MSE = {mse:.2f}. Это значение характеризует отклонение реальных оценок от предсказанных моделью.")
print("Чем ближе MSE к нулю, тем точнее модель. В данном случае ошибка невелика, что говорит о хорошем соответствии модели данным.\n")
print("Заключение:")
print("Построенная модель линейной регрессии позволяет успешно предсказывать результаты экзамена на основе времени подготовки.")

# Построение графика
plt.figure(figsize=(8, 5))
plt.scatter(X, Y, color='blue', label='Реальные данные')
plt.plot(X, predicted_Y, color='red', label='Линия регрессии')
plt.title('График линейной регрессии: Оценка vs Часы подготовки')
plt.xlabel('Часы подготовки')
plt.ylabel('Оценка за экзамен')
plt.legend()
plt.grid(True)
plt.show()